generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(uuid())
  username       String        @unique @db.VarChar(32)
  displayName    String        @db.VarChar(32)
  password       String        @db.Text
  avatar         String?       @db.Text
  banner         String?       @db.Text
  bio            String?       @db.VarChar(255)
  isDeleted      Boolean       @default(false)
  lastSeen       DateTime      @default(now()) @db.Timestamptz(3)
  createdAt      DateTime      @default(now()) @db.Timestamptz(3)
  updatedAt      DateTime      @default(now()) @db.Timestamptz(3)
  friends        Friends[]     @relation("friendOf")
  friendsOf      Friends[]     @relation("friend")
  participations Participant[]
  messages       Message[]
}

model Friends {
  friendOf   User          @relation("friendOf", fields: [friendOfId], references: [id])
  friendOfId String
  friend     User          @relation("friend", fields: [friendId], references: [id])
  friendId   String
  createdAt  DateTime      @default(now()) @db.Timestamptz(3)
  updatedAt  DateTime      @default(now()) @db.Timestamptz(3)
  status     FriendsStatus @default(PENDING)

  @@id([friendOfId, friendId])
}

enum FriendsStatus {
  PENDING
  ACTIVE
}

model Community {
  id           String        @id @default(uuid())
  name         String        @db.VarChar(128)
  bio          String?       @db.VarChar(255)
  avatar       String?       @db.Text
  banner       String?       @db.Text
  isDeleted    Boolean       @default(false)
  createdAt    DateTime      @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime      @default(now()) @db.Timestamptz(3)
  inbox        Inbox?
  participants Participant[]
}

model DirectMessage {
  id           String        @id @default(uuid())
  inbox        Inbox?
  participants Participant[]
}

model Inbox {
  id              String        @id @default(uuid())
  inboxType       InboxType
  community       Community     @relation(fields: [communityId], references: [id])
  communityId     String        @unique
  directMessage   DirectMessage @relation(fields: [directMessageId], references: [id])
  directMessageId String        @unique
  messages        Message[]
}

enum InboxType {
  DM
  COMMUNITY
}

model Participant {
  id              String            @id @default(uuid())
  user            User              @relation(fields: [userId], references: [id])
  userId          String
  role            ParticipantRole
  status          ParticipantStatus @default(PENDING)
  community       Community         @relation(fields: [communityId], references: [id])
  communityId     String
  directMessage   DirectMessage     @relation(fields: [directMessageId], references: [id])
  directMessageId String
  createdAt       DateTime          @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime          @default(now()) @db.Timestamptz(3)
  member_since    DateTime?         @db.Timestamptz(3)
}

enum ParticipantRole {
  OWNER
  MEMBER
}

enum ParticipantStatus {
  PENDING
  ACTIVE
}

model Message {
  id                  String       @id @default(uuid())
  inbox               Inbox        @relation(fields: [inboxId], references: [id])
  inboxId             String
  author              User         @relation(fields: [authorId], references: [id])
  authorId            String
  content             String       @db.VarChar(2560)
  created_at          DateTime     @default(now()) @db.Timestamptz(3)
  updated_at          DateTime     @default(now()) @db.Timestamptz(3)
  isDeleted           Boolean      @default(false)
  isRead              Boolean      @default(false)
  hiddenFromAuthor    Boolean      @default(false)
  hiddenFromRecipient Boolean      @default(false)
  replyTo             Replies[]    @relation("replyBy")
  replyBy             Replies[]    @relation("replyTo")
  attachments         Attachment[]
}

model Replies {
  replyBy   Message @relation("replyBy", fields: [replyById], references: [id])
  replyById String
  replyTo   Message @relation("replyTo", fields: [replyToId], references: [id])
  replyToId String

  @@id([replyById, replyToId])
}

model Attachment {
  id        String            @id @default(uuid())
  message   Message?          @relation(fields: [messageId], references: [id])
  messageId String?
  type      AttachmentType
  subtype   AttachmentSubtype
  height    Int?
  width     Int?
  size      Int?
  url       String            @db.Text
}

enum AttachmentType {
  IMAGE
}

enum AttachmentSubtype {
  JPEG
  PNG
  GIF
}
